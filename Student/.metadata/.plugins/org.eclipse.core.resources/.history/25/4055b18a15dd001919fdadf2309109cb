package com.lc.controller;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.fasterxml.jackson.annotation.JsonFormat.Value;
import com.lc.entity.Clazz;
import com.lc.entity.Grade;
import com.lc.entity.Student;
import com.lc.page.PageInfo;
import com.lc.service.ClazzService;
import com.lc.service.GradeService;
import com.lc.service.StudentService;
import com.lc.util.StringUtil;

import net.sf.json.JSONArray;

/**
 * 学生信息管理
 * @author Administrator
 *
 */
@RequestMapping("/student")
@Controller
public class StudentController {
	
	@Autowired
	private StudentService studentService;
	
	@Autowired
	private ClazzService clazzService;
	/**
	 * 学生列表页面
	 * @param mode
	 * @return
	 */
	@RequestMapping(value = "/list",method = RequestMethod.GET)
	public ModelAndView list(ModelAndView model) {
		model.setViewName("student/student_list");
		List<Student> clazzList = studentService.findAll();
		model.addObject("clazzList",clazzList);
		model.addObject("clazzListJson", JSONArray.fromObject(clazzList));
		return model;
	}
	
	/**
	 * 获取学生列表
	 * @param name
	 * @param page
	 * @return
	 */
	@RequestMapping(value = "/get_list",method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> getlist(
			@RequestParam(value = "name",required = false,defaultValue = "") String name,
			@RequestParam(value = "clazzId",required = false) Long clazzId,
			HttpServletRequest request,
			PageInfo page
			){
		Map<String, Object> ret =new HashMap<String, Object>();
		Map<String, Object> queryMap =new HashMap<String, Object>();
		queryMap.put("username", "%"+name+"%"); 
		Object attribute =request.getSession().getAttribute("userType");
		if ("2".equals(attribute.toString())) {
			//说明是学生
			Student loginedStudent = (Student) request.getSession().getAttribute("user");
			queryMap.put("username", "%"+loginedStudent.getUsername()+"%");
		}
		if (clazzId!=null) {
			queryMap.put("clazzId", clazzId);
		}
		queryMap.put("offset", page.getOffset());
		queryMap.put("pageSize", page.getRows());
		ret.put("rows", clazzService.findList(queryMap));
		ret.put("total", clazzService.getTotal(queryMap));
		return ret;
		
	}
	/**
	 * 添加年级信息
	 * @param clazz
	 * @return
	 */
	@RequestMapping(value="/add",method=RequestMethod.POST)
	@ResponseBody
	public Map<String, String> add(Student student){
		Map<String, String> ret = new HashMap<String, String>();
		if(StringUtils.isEmpty(student.getUsername())){
			ret.put("type", "error");
			ret.put("msg", "学生姓名不能为空！");
			return ret;
		}
		if(StringUtils.isEmpty(student.getPassword())){
			ret.put("type", "error");
			ret.put("msg", "学生登录密码不能为空！");
			return ret;
		}
		if(student.getClazzId() == null){
			ret.put("type", "error");
			ret.put("msg", "请选择所属班级！");
			return ret;
		}
		if(isExist(student.getUsername(), null)){
			ret.put("type", "error");
			ret.put("msg", "该姓名已存在！");
			return ret;
		}
		student.setSn(StringUtil.generateSn("S", ""));
		if(studentService.add(student) <= 0){
			ret.put("type", "error");
			ret.put("msg", "学生添加失败！");
			return ret;
		}
		ret.put("type", "success");
		ret.put("msg", "学生添加成功！");
		return ret;
	}
	/**
	 * 编辑学生信息
	 * @param clazz
	 * @return
	 */
	@RequestMapping(value = "/edit",method = RequestMethod.POST)
	@ResponseBody
	public Map<String, String> edit(Student student){
		
		Map<String, String> ret =new HashMap<String, String>();
		if (StringUtils.isEmpty(student.getUsername())) {
			ret.put("type", "error");
			ret.put("msg", "学生姓名不能为空");
			return ret;
		}
		if (StringUtils.isEmpty(student.getPassword())) {
			ret.put("type", "error");
			ret.put("msg", "学生登录密码不能为空");
			return ret;
		}
		if (student.getClazzId()==null) {
			ret.put("type", "error");
			ret.put("msg", "请选择所属年纪");
			return ret;
		}
		if(isExist(student.getUsername(), student.getId())){
			ret.put("type", "error");
			ret.put("msg", "该姓名已存在！");
			return ret;
		}
		student.setSn(StringUtil.generateSn("S", ""));
		if (studentService.edit(student)<=0) {
			ret.put("type", "error");
			ret.put("msg", "学生修改失败");
			return ret;
		}
		ret.put("type", "success");
		ret.put("msg", "学生修改成功");
		return ret;
		
	}
	/**
	 * 删除学生信息
	 * @param ids
	 * @return
	 */
	@RequestMapping(value = "/delete",method = RequestMethod.POST)
	@ResponseBody
	public Map<String, String> delete(
			@RequestParam(value = "ids[]",required = true) Long[] ids
			){
		Map<String, String> ret=new HashMap<String, String>();
		if (ids==null|| ids.length==0) {
			ret.put("type", "error");
			ret.put("msg", "请选择删除的数据");
			return ret;
		}
		try {
			if (clazzService.delete(StringUtil.joinString(Arrays.asList(ids), ","))<=0) {
				ret.put("type", "error");
				ret.put("msg", "删除失败");
				return ret;
			}
		} catch (Exception e) {
			ret.put("type", "error");
			ret.put("msg", "该学生下有学生信息，请勿冲动！");
			return ret;
		}
		ret.put("type", "success");
		ret.put("msg", "学生删除成功！");
		return ret;
	}
	
	private boolean isExist(String username,Long id) {
		Student student =studentService.findByUserName(username);
		if (student!=null) {
			if (id==null) {
				return true;
			}
			if (student.getId().longValue()!=id.longValue()) {
				return true;
			}
		}
		return false;
		
	}
}
